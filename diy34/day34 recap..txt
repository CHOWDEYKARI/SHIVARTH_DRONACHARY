Untitled Note
2023-03-25_15h22

#shiva#
Or something man
Types of data structures we discussed about the linear and
Period
Non-linear types of data structure linear data structures are the data structures in which we have one element of the data connected to the other element of the data in a linear fashion whereas in non-linear data structure one element of the data value can be connected to 10 different other data values inside the data structure we also discussed about the types of linear and non-linear data structures such as for linear data structure we have arrays which are contagious memory locations whose index is used to access the values stored inside and array then we discussed about dealing list in the linked list we saw three types of linked list single linked list doubly linked list and circular linked list in distingly linked list we learn that each data element is made up of two different things the first thing is the data stored in the node in the next thing is the link to the next node and this type of list can only be Traverse in a linear fashion in one single Direction then we learned about the wielding list each node consists of three parts the first part is the data value the second part is the pointer to the next node and the third part is
Previous note because of this Behavior doubly linked list can be traversed in both directions forward and backward but only in a linear fashion then we learned about the circular linked list circular linked list can be singly as well as doubly in a circular linked list the last node is pointing to always the first note that is the head of the linked list thus thereby completing the loop or the circle hence it is known as the circular linked list then we learned about these tax these tax are nothing but implementation of last in first out Paradigm we are in the element added to the stack first will be taken last it has appointed known as top which always points to the top most location of the stat then we learned about the queue we're in an element about the non-linear data structures such as trees graphs and maps please represents hierarchical relationship between the data graphs represents recyclery sets and maps are used for storing the key value pairs in a set we can only have the unique value associations
Then we learned about the linear data structure as we discussed after that we did learn about the link list as we discussed that each note consist of element and next and data and the next Point are going to the next element three is a nonlinear data structure they are the first element is known as the root after that we have the parent notes and then we have the internal notes the last nodes in the tree which do not Branch out are known as the leaf nodes in the tree we also learned about commonly used terminologies such as part and length is a sequence of nodes between the two nodes the length of a path is the total number of nodes in that part height is for example the height of node n is the length of the longest part from end to a leaf depth of a tree is calculated from the root to a particular node degree of a node is a total number of sub please attached to a node degree of the tree is equal to the highest degree attained by any note in the tree the notes which have a common parent are known as siblings in a tree we learn about crafts in the graphs we learned about two different kinds of graphs directed graphs always flow from one note whereas undirected graphs are something which do not have any specific directions between the nodes every element of a graph is known as
And the connection between the vertices is known as an edge then we learned about the program design program design is an approach to design a specific program the steps involves the documentation input and output data and the data structure involved every program consists of component structure data structure control structure and input and outputs we learned about algorithm as a step by step approach to solve a given problem we learned that algorithm as the name suggests is going to take us from start of the program to the end of the program it means the process of set of rules to be followed in calculations or other problems solving operations algorithm refers to a set of rules instructions that step by step Define how a work is to be executed upon in order to get the expected results we also learned various different approaches for an algorithm we learn that whenever we discuss about algorithm we always talk about the design of an algorithm and Analysis of an algorithm while we design an algorithm there are various approaches which we can take such as the Brute Force approach Brute Force approach has the name suggest is a straightforward method of solving a program or a problem that rely on share computing power and trying every possibility rather than Advanced Techniques to improve the efficiency example of a keypad lock
Might have to write 10,000 different combinations before we track a keypad then after that we can have these randomized algorithms randomized algorithms are the ones we are in we can choose random values in order to bring down the complexity involved it's an algorithm that uses random numbers to decide what to do next anywhere in the logic then we also learned about divide and concur algorithm divide and counter approach is helpful when we solve the problem and while we divide the problem into various problems this technique has three parts the first part is to divide the problem into sub problems the second part is to conquer that means solve those problems by calling recursively until salt finally the third part is the combine we combine these are problems to get the final solution of the whole program similarly we have that tracking backtracking is an algorithmic technique for solving problems recursively by trying to build a solution incrementally one piece at a time removing those solutions that fail to 35 the constraints of the problem at any given point of time after that we discuss about the greedy approach or the greedy method in the greedy method it's an algorithmic Paradigm that builds up a solution piece by piece always
In the next place is that offers the
Obvious and immediate benefit to the problems we are choosing locally optimal also leads to Global solution are best fit for greedy after that we discussed about branch and bound branch and bound is an algorithm design Paradigm which is generally used for solving combinatorial optimization problems these problems are typically exponential in terms of time complexity and may require exploring all possible permutations in worst case we did discuss about dynamic programming we learn that dynamic programming is mainly an optimization over playing recursion wherever we see a recursive solution that has repeated calls for the same inputs we can optimize it using dynamic programming the idea is to Simply store the results of sub problems so that we do not have to recompute them when needed later this simple optimization reduces time complexities from exponential to polynomial after that we learned about a Sim
analysis of the algorithms wherein we discuss about the time complexity and space complexity of an algorithm so we discussed about Brute Force divide and conquer greedy method dynamic programming then for the program complexity we took the Big O notation approach wherein the Big O notation describes the complexity of your code by using algebraic terms since we all are familiar with algebra and it becomes really easy to compute those algebraic terms so we also took an example of a sorting
Again I'm having 50 times
problem where in the complexity involved was on square and hence we understood the Big O notation and that's all we learned in the previous session in the next session let's learn some interesting algorithms and data structures thank you
Hi in this video we are going to talk about the recap of previous session in the previous session
Except not hold us together
And
